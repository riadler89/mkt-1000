---
description: Vue 3 composable patterns and best practices
globs: ["**/composables/**/*"]
alwaysApply: false
---

# Composables Guidelines

## Composable Naming and Structure
- Use camelCase with "use" prefix for composable names (e.g., `useAuthentication`, `useTracking`)
- Place composables in the `app/composables/` directory
- Use descriptive names that clearly indicate the composable's purpose
- Follow the existing patterns established in the codebase

## Composable Implementation
- **Favor `ref()` over `reactive()`** for most reactive data
- Use `ref()` for primitive values and simple objects
- Use `reactive()` only for complex objects that need deep reactivity
- Return an object with all exposed properties and methods
- Use TypeScript interfaces for return types

## Composable Design Patterns
- Keep composables focused on a single responsibility
- Provide clear separation between state and actions
- Use proper error handling with meaningful error messages
- Implement proper cleanup in `onUnmounted()` when needed
- Consider caching strategies for expensive operations

## Composable Best Practices
- Use `computed()` for derived state over methods when possible
- Use `watch()` and `watchEffect()` for side effects
- Implement proper TypeScript typing for all parameters and return values
- Provide comprehensive JSDoc documentation
- Test composables thoroughly with appropriate test cases

## Import Guidelines
- **Always prefer importing from `@scayle/storefront-nuxt`** over `@scayle/storefront-core` or `@scayle/storefront-api`
- Use `@scayle/storefront-nuxt` as the primary import source for all storefront functionality
- Avoid direct imports from internal dependencies when possible
- Import composable utilities directly from their source files
- Use explicit imports to improve tree-shaking and bundle optimization

## Error Handling
- Implement proper error handling with typed error objects
- Use try-catch blocks for async operations
- Provide meaningful error messages for debugging
- Consider using error boundaries for composable errors
- Log errors appropriately for monitoring and debugging

## Performance Considerations
- Optimize bundle size by avoiding unnecessary imports
- Monitor performance impact of composable usage