# Disable strict peer dependencies checking to avoid installation failures
# This prevents pnpm from failing when peer dependencies are not explicitly installed
# as dependencies, which is common in Nuxt applications where peer deps are often
# provided by the framework or other packages
# See: https://pnpm.io/npmrc#strict-peer-dependencies
strict-peer-dependencies=false

# Disable workspace package preference to use published versions instead of local ones
# This ensures that the boilerplate uses the published versions of @scayle packages
# rather than trying to link to local workspace versions, which is important for
# the template to work correctly when copied to a new project
# See: https://pnpm.io/npmrc#prefer-workspace-packages
prefer-workspace-packages=false

# Hoist all packages to the root node_modules to ensure proper module resolution
# This is a workaround for Nuxt 3 compatibility issues where the framework expects
# all dependencies to be available at the root level for proper module resolution
# and bundling, especially when using Vite's dependency pre-bundling feature
# See: https://github.com/nuxt/nuxt/issues/14146#issuecomment-1467427901
public-hoist-pattern[]=*
# Alternative approach
# https://github.com/nuxt/nuxt/issues/14146#issuecomment-1475894768

# Use clone-or-copy for package imports to ensure compatibility with Nuxt's module resolution
# This method creates actual copies of packages instead of hard links, which prevents issues
# with Nuxt's dynamic imports and module bundling that can occur with hard links
package-import-method=clone-or-copy

# Use hoisted node linker to flatten the node_modules structure
# This is necessary for Nuxt 3 compatibility as it expects a flat node_modules structure
# for proper module resolution and bundling, especially with Vite's dependency pre-bundling
node-linker=hoisted

# Resolves ` ERR_PNPM_ADDING_TO_ROOT ` if trying to add a new dependency to the
# Storefront Application root
ignore-workspace-root-check=true
