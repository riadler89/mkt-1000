#####################################
### SCAYLE STOREFRONT APPLICATION ###
###  Local Environment Variables  ###
#####################################

### LOCAL DEVELOPMENT ONLY ###
HTTPS_KEY=localhost.pem
HTTPS_CERT=localhost.crt

### URLs ###
BASE_URL=http://localhost:3000
NUXT_PUBLIC_CDN_URL='https://{{tenant-space}}.cdn.scayle.cloud/'

# Enable debugging logging during local development
NUXT_PUBLIC_STOREFRONT_LOG_LEVEL=debug

### STOREFRONT CACHE using scayleKv driver ###
SCAYLE_KV_HOST=localhost
SCAYLE_KV_PORT=6379
SCAYLE_KV_BASE=storefront-boilerplate
SCAYLE_KV_USER=
SCAYLE_KV_PASSWORD=
NUXT_STOREFRONT_STORAGE_CACHE_DISABLE_CLUSTER_MODE=true
NUXT_STOREFRONT_STORAGE_SESSION_DISABLE_CLUSTER_MODE=true


### STOREFRONT REDIRECTS ###
NUXT_STOREFRONT_REDIRECTS_ENABLED=true

### SCAYLE STOREFRONT API ###
NUXT_STOREFRONT_SAPI_HOST='https://{{tenant-space}}.storefront.api.scayle.cloud/v1/'
NUXT_STOREFRONT_SAPI_TOKEN=

### SCAYLE AUTHENTICATION (OAUTH) ###
# https://scayle.dev/en/storefront-guide/developer-guide/basic-setup/authentication/
NUXT_STOREFRONT_OAUTH_API_HOST='https://{{tenant-space}}.auth.scayle.cloud'
NUXT_STOREFRONT_OAUTH_CLIENT_ID=
NUXT_STOREFRONT_OAUTH_CLIENT_SECRET=

### BEGIN STORE-SPECIFIC CONFIGURATION ###
# This section can be copied and repeated for every shop that should be configured!
# NOTE: Replace {UNIQUE_IDENTIFIER} with your actual shopId or your locale value (e.g. EN_US or DE_DE).
# The used UNIQUE_IDENTIFIER needs to be equal to the key ( [shop.locale] or [shop.shopId] ) set of the shops.reduce function
# in config/storefront.ts
# NOTE: We recommend to use the shopId as {UNIQUE_IDENTIFIER}!
# Example if `[shop.locale]` is used -> Overridable environment variable: NUXT_STOREFRONT_SHOPS_EN_US_CHECKOUT_USER.
# Example if `[shop.shopId]` is used -> Overridable environment variable: NUXT_STOREFRONT_SHOPS_1001_CHECKOUT_USER.
NUXT_STOREFRONT_SHOPS_{UNIQUE_IDENTIFIER}_CHECKOUT_USER=
NUXT_STOREFRONT_SHOPS_{UNIQUE_IDENTIFIER}_CHECKOUT_TOKEN=
NUXT_STOREFRONT_SHOPS_{UNIQUE_IDENTIFIER}_CHECKOUT_SECRET=
NUXT_STOREFRONT_SHOPS_{UNIQUE_IDENTIFIER}_CHECKOUT_HOST='https://{{tenant-space}}.checkout.api.scayle.cloud'

NUXT_STOREFRONT_SHOPS_{UNIQUE_IDENTIFIER}_DOMAIN=
# When using different domains, make sure to also set the domain for nuxt-i18n
NUXT_PUBLIC_I18N_LOCALES_{CODE}_DOMAIN=

NUXT_STOREFRONT_SHOPS_{UNIQUE_IDENTIFIER}_STORE_CAMPAIGN_KEYWORD=

NUXT_STOREFRONT_SHOPS_{UNIQUE_IDENTIFIER}_IS_LOWEST_PREVIOUS_PRICE_ACTIVE=false
### END STORE-SPECIFIC CONFIGURATION ###

### GOOGLE TAG MANAGER ###
NUXT_PUBLIC_GTM_ID='GTM-123'
NUXT_PUBLIC_GTM_DEBUG=true

### STOREFRONT-CMS ###
# Use "Scayle" as a default provider
CMS_PROVIDER=scayle

### STOREFRONT-CMS: STORYBLOK ###
# Use either StorefrontCMS: Storyblok or StorefrontCMS: Contentful environment variables
# Parallel setup is not supported!
NUXT_PUBLIC_CMS_ACCESS_TOKEN=
NUXT_PUBLIC_CMS_SPACE=
NUXT_PUBLIC_CMS_LOCATION=eu
# The personal access token is used to access the Storyblok management API when e.g. generating types.
STORYBLOK_PERSONAL_TOKEN=
NUXT_PUBLIC_CMS_ALLOW_DRAFTS=true

### STOREFRONT-CMS: CONTENTFUL ###
# Use either StorefrontCMS: Storyblok or StorefrontCMS: Contentful environment variables
# Parallel setup is not supported!
# NUXT_PUBLIC_CMS_HOST defaults to "cdn.contentful.com"
# NUXT_PUBLIC_CMS_HOST=
# NUXT_PUBLIC_CMS_ACCESS_TOKEN=
# NUXT_PUBLIC_CMS_PREVIEW_HOST defaults to "preview.contentful.com"
# NUXT_PUBLIC_CMS_PREVIEW_HOST=
# NUXT_PUBLIC_CMS_PREVIEW_ACCESS_TOKEN=
# NUXT_PUBLIC_CMS_SPACE=
# NUXT_PUBLIC_CMS_ALLOW_DRAFTS=true
#The management token is used to access the contentful's management API when e.g. generating types.
#CONTENTFUL_MANAGEMENT_TOKEN=

### BUILDTIME ###
DOMAIN_DEFAULT=localhost
PAGE_CACHE_DISABLED=false
NUXT_DEBUGGING_ENABLED=false
CONFIG_LOG_BUILD_ENABLED=false
CONFIG_LOG_RUNTIME_ENABLED=false
CONFIG_LOG_PRETTIER_ENABLED=false
OTEL_ENABLED=true

### ADDON: OMNICHANNEL ###
NUXT_OMNICHANNEL_API_HOST=
NUXT_OMNICHANNEL_API_TOKEN=

### GOOGLE MAPS ###
NUXT_PUBLIC_GOOGLE_MAPS_API_KEY=

### ADDON: SUBSCRIPTION ###
NUXT_PUBLIC_SUBSCRIPTION_OVERVIEW_WEB_HOST=
NUXT_PUBLIC_SUBSCRIPTION_CANCELLATION_WEB_HOST=
NUXT_PUBLIC_SUBSCRIPTION_API_URL=

### OPENTELEMETRY ###
# https://opentelemetry.io/docs/specs/otel/configuration/sdk-environment-variables/#general-sdk-configuration
OTEL_SERVICE_NAME=storefront-boilerplate

#############################
# TESTING: Playwright (E2E) #
#############################

### PLAYWRIGHT E2E TEST USERS ###
# As a prerequisite to successfully run the any end-to-end test that requires user authentication, the following environment variables should be set:
# Dedicated test user for Chromium in tests that are prone to conflicts (e.g. adding product to Basket in parallel for all browsers).
# This user is also used as a default test user across the Storefront Boilerplate end-to-end tests suite.
TEST_USER_EMAIL1=
# Dedicated test user for desktop Firefox.
TEST_USER_EMAIL2=
# Dedicated test user for desktop Webkit (Safari).
TEST_USER_EMAIL3=
# Dedicated test user for mobile Chrome.
TEST_USER_EMAIL4=
# Dedicated test user for mobile Webkit (Safari).
TEST_USER_EMAIL5=
# Test user used to verify hydration errors for logged-in users on pages with items (Wishlist and Basket).
# This test user should have items in Wishlist and Basket, so the non-empty state is tested properly.
TEST_USER_EMAIL6=
# Test user with no orders placed. Used to verify Orders page empty state.
TEST_USER_NO_ORDERS=
# Password (the same for all test users listed above).
TEST_USER_PASSWORD=
# Password used for test that verifies user authentication with wrong credentials.
TEST_USER_WRONG_PASSWORD=

### PLAYWRIGHT E2E SEARCH TERMS ###
# As a prerequisite to successfully run the Search end-to-end tests, the following environment variables should be set.
# Search term that doesn't match any category name, so the search suggestions are not shown, e.g. some product brand.
E2E_SEARCH_TERM_PRODUCT=
# Search term that fully or partially matches category name, e.g. "shirt" or "shirts".
E2E_SEARCH_TERM_CATEGORY_SUGGESTION=
# Search term that matches exact product ID, e.g. 123456.
E2E_SEARCH_EXACT_PRODUCT_ID=
# Descriptive search term that returns search suggestion tags in search suggestions list, e.g. "Black shoes size 44".
E2E_SEARCH_TAGS=
# Search term that fully or partially matches a (content) page, e.g. "faq" or "support".
E2E_SEARCH_PAGE=
# Search term that matches the exact product reference key, e.g. "123-ref-key".
E2E_SEARCH_REFERENCE_KEY=

#####################################
# TESTING: Artillery (Load Testing) #
#####################################

# NOTE: All default values are intended for short local testing
# and need to be adjusted for meaningful test runs.

# Phases durations for Load Test (3 phases)
# Sample values:
# 60 - 60 seconds
# 30m - 30 minutes
# 1h - 1 hour
ARTILLERY_LOAD_DURATION_P1=1
ARTILLERY_LOAD_DURATION_P2=2
ARTILLERY_LOAD_DURATION_P3=3

# Arrival rates for Load Test (3 phases)
# The arrival rate is the number of new virtual users that Artillery will create per second.
# For example, value 5 means Artillery will inject exactly 5 new users every second for the entire duration of the phase.
ARTILLERY_LOAD_ARRIVAL_RATE_P1=5
ARTILLERY_LOAD_ARRIVAL_RATE_P2=6
ARTILLERY_LOAD_ARRIVAL_RATE_P3=7

# The rampTo parameter is used in combination with arrivalRate to create a gradually increasing load.
# It defines the target number of new virtual users per second that the test will reach by the end of the phase.
# For example, if duration is 10, arrival rate is 2, and ramp to is 10, Artillery will start by injecting 2 users per second
# and will gradually increase that rate until it's injecting 10 users per second by the 10th second.
ARTILLERY_LOAD_RAMP_TO_P1=5
ARTILLERY_LOAD_RAMP_TO_P2=10

# Scenario weights (percentage of distribution) for Load Test.
# 7 scenarios in total.
# Weight is a crucial parameter in an Artillery scenario.
# It defines the probability or percentage of virtual users that will run a particular scenario.
# For example, value 2 will take 20% of overall execution (2/10), value 5 will take 50%, etc.
ARTILLERY_LOAD_WEIGHT_S1=2
ARTILLERY_LOAD_WEIGHT_S2=1
ARTILLERY_LOAD_WEIGHT_S3=1
ARTILLERY_LOAD_WEIGHT_S4=2
ARTILLERY_LOAD_WEIGHT_S5=2
ARTILLERY_LOAD_WEIGHT_S6=1
ARTILLERY_LOAD_WEIGHT_S7=1

# Phases durations for Stress Test (3 phases).
# example values:
# 60 - 60 seconds
# 30m - 30 minutes
# 1h - 1 hour
ARTILLERY_STRESS_DURATION_P1=1
ARTILLERY_STRESS_DURATION_P2=2
ARTILLERY_STRESS_DURATION_P3=3

# Arrival rates for Stress Test (3 phases).
# The arrival rate is the number of new virtual users that Artillery will create per second.
# For example, value 5 means Artillery will inject exactly 5 new users every second for the entire duration of the phase.
ARTILLERY_STRESS_ARRIVAL_RATE_P1=5
ARTILLERY_STRESS_ARRIVAL_RATE_P2=6
ARTILLERY_STRESS_ARRIVAL_RATE_P3=7

# Ramp To for Stress Test for the first and third phase. The 2nd phase uses only constant arrival rate.
# The rampTo parameter is used in combination with arrivalRate to create a gradually increasing load.
# It defines the target number of new virtual users per second that the test will reach by the end of the phase.
# For example, if duration is 10, arrival rate is 2, and ramp to is 10, Artillery will start by injecting 2 users per second
# and will gradually increase that rate until it's injecting 10 users per second by the 10th second.
ARTILLERY_STRESS_RAMP_TO_P1=10
ARTILLERY_STRESS_RAMP_TO_P3=0 # Ramp down to 0 users

# Scenario weights (percentage of distribution) for Stress Test.
# 3 scenarios in total.
# Weight is a crucial parameter in an Artillery scenario.
# It defines the probability or percentage of virtual users that will run a particular scenario.
# For example, value 2 will take 20% of overall execution (2/10), value 5 will take 50%, etc.
ARTILLERY_STRESS_WEIGHT_S1=4
ARTILLERY_STRESS_WEIGHT_S2=3
ARTILLERY_STRESS_WEIGHT_S3=3
